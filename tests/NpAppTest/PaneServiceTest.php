<?php
namespace NpAppTest\View\Pane\Service;

use Flower\View\Pane\PaneEvent;
use NpAppTest\Bootstrap;
use Zend\View\Renderer\PhpRenderer;

/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2014-02-06 at 23:02:41.
 */
class ManagerFactoryIntegrationTest extends \PHPUnit_Framework_TestCase
{
    protected $serviceLocator;

    protected $paneCacheStorage;

    protected $renderCacheStorage;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->serviceLocator = Bootstrap::getServiceManager();
        $this->serviceLocator->get('Application')->bootstrap();
        $this->view = $this->serviceLocator->get('ViewManager')->getRenderer();
        $this->manager = $this->view->plugin('npPaneManager');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        $this->manager->refresh('foo');
        $this->manager->refresh('bar');
        $this->manager->refresh('demo');
        $this->manager->refresh('tile');
        $this->manager->refresh('tile/my-tile-container');
    }

    public function testCanGetPaneManager()
    {
        $this->assertInstanceOf('Flower\View\Pane\PaneManager', $this->manager);
    }

    public function testCanGetPaneInConfig()
    {
        $pane = $this->manager->get('bar');
        $this->assertInstanceOf('Flower\View\Pane\PaneClass\PaneInterface', $pane);
        $res = $this->manager->render('bar');
        $expected = '<!-- begin Renderer -->
<div>
</div>
<!-- end Renderer -->
';
        $this->assertEquals(str_replace("\r\n", "\n", $expected), $res);
    }

    public function testCanGetPaneInFile()
    {
        $pane = $this->manager->get('tests/demo');
        $this->assertInstanceOf('Flower\View\Pane\PaneClass\PaneInterface', $pane);
        $res = $this->manager->render('tests/demo');
        $expected =
'<!-- begin Renderer -->
<!-- start pane -->
  <!-- start content CallbackRender -->
  <div>
  <div class="navcontain">
  <!-- start content tests/nil -->
  <!-- end content tests/nil -->
  </div>
  </div>
  <!-- end content CallbackRender -->
  <div class="row view">
    <div id="docs-content" class="push_three nine columns">
      <!-- start content header -->
      <div>
        <!-- var header is not found -->
      </div>
      <!-- end content header -->
      <!-- start content content -->
      <div>
        <!-- var content is not found -->
      </div>
      <!-- end content content -->
    </div>
    <!-- start content sidebar -->
    <div id="sidebar" class="three columns pull_nine">
      <!-- var sidebar is not found -->
    </div>
    <!-- end content sidebar -->
  </div>
  <div id="footer" class="row">
    <!-- start content footer -->
    <div class="twelve columns">
      <!-- var footer is not found -->
    </div>
    <!-- end content footer -->
  </div>
<!-- end pane -->
<!-- end Renderer -->
';
        $this->assertEquals(str_replace("\r\n", "\n", $expected), $res);
    }

    public function testEventListnerIsAttached()
    {
        $eventManager = $this->manager->getEventManager();
        $listeners = $eventManager->getListeners(PaneEvent::EVENT_GET_PANE);
        $this->assertEquals(3, $listeners->count());
    }

    public function testPaneExtended()
    {
        $pane = $this->manager->get('tile/my-tile-container');
        $array = array(
            array('label' => 'foo', 'var' => 'foo'),
            array('label' => 'bar'),
            array('label' => 'baz'),
        );
        $collection = new \ArrayIterator($array);
        $pane->setCollection($collection);
        $expects = str_replace("\r\n", "\n", ''
                . '<!-- begin Renderer -->
<ul id="my-tile-container">
  <!-- start content CallbackRender -->
  <!-- start wrap pane -->
  <li class="tile">
  <!-- start content tests/entity -->
array (
  \'label\' => \'foo\',
  \'var\' => \'foo\',
)  <!-- end content tests/entity -->
  </li>
  <!-- end wrap pane -->
  <!-- end content CallbackRender -->
  <!-- start content CallbackRender -->
  <!-- start wrap pane -->
  <li class="tile">
  <!-- start content tests/entity -->
array (
  \'label\' => \'bar\',
)  <!-- end content tests/entity -->
  </li>
  <!-- end wrap pane -->
  <!-- end content CallbackRender -->
  <!-- start content CallbackRender -->
  <!-- start wrap pane -->
  <li class="tile">
  <!-- start content tests/entity -->
array (
  \'label\' => \'baz\',
)  <!-- end content tests/entity -->
  </li>
  <!-- end wrap pane -->
  <!-- end content CallbackRender -->
</ul>
<!-- end Renderer -->
');
        $res = $this->manager->renderPane($pane);
        $this->assertEquals($expects, $res);
    }
}
