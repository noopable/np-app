<?php

namespace NpAppTest\Form;

use NpApp\Form\ContactForm;
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-04-29 at 06:18:35.
 */
class ContactFormTest extends \PHPUnit_Framework_TestCase
{

    /**
     * @var ContactForm
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new ContactForm;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
        
    }

    public function testInputFilterIsSet()
    {
        $inputFilter = $this->object->getInputFilter();
        $this->assertInstanceof('Zend\InputFilter\InputFilter', $inputFilter);
        $sm = \NpAppTest\Bootstrap::getServiceManager();
        $formManager = $sm->get('FormElementManager');
        $inputFilter2 = $formManager->get('NpApp\Form\ContactForm')->getInputFilter();
        $this->assertEquals($inputFilter, $inputFilter2);
    }
    
    public function testInputFilterValidate()
    {
        $data = array (
            'name' => '' ,
            'email' => '' ,
            'postalcode' => '' ,
            'address' => '' ,
            'comment' => '' ,
            'id' => '' ,
        );
        $sm = \NpAppTest\Bootstrap::getServiceManager();
        $formManager = $sm->get('FormElementManager');
        $inputFilter = $formManager->get('NpApp\Form\ContactForm')->getInputFilter();
        $inputFilter->setData($data);
        $this->assertFalse($inputFilter->isValid());
    }
    public function testDi()
    {
        $di = \NpAppTest\Bootstrap::getServiceManager()->get('Di');
        $form = $di->get('Zend\Form\Form');
        $this->assertInstanceof('Zend\Form\Form', $form);
    }
    
    public function testFormSerialize()
    {
        $form = new \Zend\Form\Form;
        
        $form->setAttribute('method', 'post');

        $form->add(array(
            'name' => 'id',
            'attributes' => array(
                'type'  => 'hidden',
            ),
        ),
        array('priority' => 1));
        error_log(var_export(array_keys(get_object_vars($form)), true));
        $serialized = serialize($form->get('id'));
        return;

        $form->add(array(
            'name' => 'name',
            'attributes' => array(
                'type'  => 'text',
                'id' => 'name',
                'placeholder' => 'お名前(必須)',
            ),
            'options' => array(
                'label' => 'お名前',
            ),
        ),
        array('priority' => 100));

        $form->add(array(
            'name' => 'email',
            'type' => 'Zend\Form\Element\Email',
            'attributes' => array(
                'type'  => 'text',
                'id' => 'mailaddress',
                'placeholder' => 'メールアドレス(必須)',
            ),
            'options' => array(
                'label' => '電子メールアドレス',
            ),
        ),
        array('priority' => 90));

        //$form->get('email')->setEmailValidator(new \Zend\Validator\EmailAddress);
        $form->add(array(
            'name' => 'postalcode',
            'attributes' => array(
                'type'  => 'text',
                'id' => 'postalcode',
            ),
            'options' => array(
                'label' => '郵便番号',
            ),
        ),
        array('priority' => 82));

        $form->add(array(
            'name' => 'address',
            'type' => 'Zend\Form\Element\Textarea',
            'attributes' => array(
                'id' => 'address',
                'class' => 'span4',
                //'type' => 'textarea',
                'placeholder' => '資料請求等の際は必ずご記入ください',
            ),
            'options' => array(
                'label' => 'ご住所',
            ),
        ),
        array('priority' => 80));

        $form->add(array(
            'name' => 'comment',
            'type' => 'Zend\Form\Element\Textarea',
            'attributes' => array(
                'id' => 'comment',
                'rows' => '5',
                'class' => 'span5',
            ),
            'options' => array(
                'label' => 'コメント',
            ),
        ),
        array('priority' => 50));

        /*
        $form->add(array(
            'name' => 'csrf',
            'type' => 'Zend\Form\Element\Csrf',
            'attributes' => array(
            ),
        ));*/
        $serialized = serialize($form);
        $this->assertTrue($serialized);
    }
    /**
     * 
     * @expectedException \Exception
     */
    public function testSerializable()
    {
        try {
            $serialized = serialize($this->object);
        }
        catch (Exception $e) {
            $this->assertTrue($e);
        }
        
        $this->assertTrue(unserialize($serialized));
    }
    
    public function testFormElementManger()
    {
        $sm = \NpAppTest\Bootstrap::getServiceManager();
        $formManager = $sm->get('FormElementManager');
        $this->assertTrue($formManager->has('NpApp\Form\ContactForm'));
    }
    
    public function testFormElementMangerHasFormFactory()
    {
        $sm = \NpAppTest\Bootstrap::getServiceManager();
        $formManager = $sm->get('FormElementManager');
        $this->assertTrue($formManager->has('Zend\Form\Factory'));
    }
    
    public function testDi2()
    {
        $di = \NpAppTest\Bootstrap::getServiceManager()->get('Di');
        $form = $di->get('Zend\Form\Form');
        $this->assertInstanceof('Zend\Form\Form', $form);
    }
}
